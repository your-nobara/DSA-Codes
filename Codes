PRACTICAL NO :- 01 
Consider telephone book database of N clients. Make use of a hash table implementation
to quickly look up clientâ€˜s telephone number. Make use of two collision handling
techniques and compare them using number of comparisons required to find a set of
telephone numbers.

#PROGRAM
# Hash Table using Linear Probing
class LinearProbingHashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * size

    def insert(self, key, name):
        idx = key % self.size
        while self.table[idx] is not None:
            idx = (idx + 1) % self.size
        self.table[idx] = (key, name)

    def search(self, key):
        comparisons = 0
        idx = key % self.size
        start = idx
        while self.table[idx] is not None:
            comparisons += 1
            if self.table[idx][0] == key:
                return self.table[idx][1], comparisons
            idx = (idx + 1) % self.size
            if idx == start:
                break
        return None, comparisons

    def display(self):
        for i in range(self.size):
            if self.table[i]:
                print(f"Index {i}: {self.table[i][0]} -> {self.table[i][1]}")
            else:
                print(f"Index {i}: Empty")

class Node:
    def __init__(self, key, name):
        self.key = key
        self.name = name
        self.next = None

class ChainingHashTable:
    def __init__(self, size):
        self.size = size
        self.table = [None] * size

    def insert(self, key, name):
        idx = key % self.size
        new_node = Node(key, name)
        if self.table[idx] is None:
            self.table[idx] = new_node
        else:
            temp = self.table[idx]
            while temp.next:
                temp = temp.next
            temp.next = new_node

    def search(self, key):
        comparisons = 0
        idx = key % self.size
        temp = self.table[idx]
        while temp:
            comparisons += 1
            if temp.key == key:
                return temp.name, comparisons
            temp = temp.next
        return None, comparisons

    def display(self):
        for i in range(self.size):
            print(f"Index {i}:", end=" ")
            temp = self.table[i]
            if not temp:
                print("Empty")
            else:
                while temp:
                    print(f"({temp.key} -> {temp.name})", end=" -> ")
                    temp = temp.next
                print("None")

def main():
    clients = [
        (1234567890, "Alice"),
        (2345678901, "Bob"),
        (3456789012, "Charlie"),
        (4567890123, "Daisy"),
        (5678901234, "Eve")
    ]

    print("Enter number of clients:", len(clients))
    lp = LinearProbingHashTable(10)
    ch = ChainingHashTable(10)

    print("\nEnter client details (Phone Number and Name):")
    for phone, name in clients:
        print(f"Phone Number: {phone}")
        print(f"Name: {name}")
        lp.insert(phone, name)
        ch.insert(phone, name)

    print("\nLinear Probing Telephone Book:")
    lp.display()

    print("\nChaining Telephone Book:")
    ch.display()

    search_key = 3456789012
    print(f"\nEnter phone number to search: {search_key}")

    res_lp, comp_lp = lp.search(search_key)
    res_ch, comp_ch = ch.search(search_key)

    if res_lp:
        print(f"\n[Linear Probing] Found {res_lp} with {comp_lp} comparisons.")
    else:
        print("\n[Linear Probing] Phone number not found.")

    if res_ch:
        print(f"[Chaining] Found {res_ch} with {comp_ch} comparisons.")
    else:
        print("[Chaining] Phone number not found.")

    print("\nComparison:")
    if comp_lp < comp_ch:
        print("Linear Probing is faster for this search.")
    elif comp_ch < comp_lp:
        print("Chaining is faster for this search.")
    else:
        print("Both methods took same number of comparisons.")

if __name__ == "__main__":
    main()


PRACTICAL NO :- 02
To create ADT that implement the "set" concept.
a. Add (newElement) -Place a value into the set
b. Remove (element) Remove the value
c. Contains (element) Return true if element is in collection
d. Size () Return number of values in collection Iterator () Return an iterator used to loop
over collection
e. Intersection of two sets
f. Union of two sets
g. Difference between two sets
h.Subset 

#PROGRAM
class Set:
    def __init__(self):
        self.elements = []
        
    def add(self, item): 
        if item not in self.elements: 
            self.elements.append(item)
    
    def remove(self, item): 
        if item in self.elements: 
            self.elements.remove(item)
    
    def contains(self, item): 
        return item in self.elements
    
    def size(self): 
        return len(self.elements)
    
    def iterator(self): 
        return iter(self.elements)
    
    def intersection(self, other): 
        return Set.from_list([e for e in self.elements if other.contains(e)])
    
    def union(self, other):
        result = Set()
        result.elements = self.elements.copy()
        for e in other.elements: 
            result.add(e)
        return result
    
    def difference(self, other): 
        return Set.from_list([e for e in self.elements if not other.contains(e)])
    
    def subset(self, other): 
        return all(other.contains(e) for e in self.elements)
    
    @staticmethod
    def from_list(lst):
        s = Set()
        for item in lst: 
            s.add(item)
        return s

def create_set(name, elements):
    s = Set()
    print(f"Enter number of elements for {name}: {len(elements)}")
    for element in elements:
        print("Enter element:", element)
        s.add(element)
    return s

# Hardcoded elements
set1_elements = ["apple", "banana", "cherry"]
set2_elements = ["banana", "cherry", "date", "fig"]

# Create sets
s1 = create_set("Set 1", set1_elements)
s2 = create_set("Set 2", set2_elements)

# Output
print("Set 1:", list(s1.iterator()))
print("Set 2:", list(s2.iterator()))
print("Intersection:", list(s1.intersection(s2).iterator()))
print("Union:", list(s1.union(s2).iterator()))
print("Difference (Set1 - Set2):", list(s1.difference(s2).iterator()))
print("Set1 is subset of Set2:", s1.subset(s2))

PRACTICAL NO :- 03
A book consists of chapters, chapters consist of sections and sections consist of
subsections. Construct a tree and print the nodes. Find the time and space requirements
of your method. 

#PROGRAM
#include <iostream>
#include <vector>
#include <chrono>
using namespace std;
using namespace chrono;

struct Node {
    string name;
    vector<Node*> children;
    Node(string nodeName) : name(nodeName) {}
};

void printTree(Node* root, int& nodeCount) {
    if (!root) return;
    cout << root->name << endl;
    nodeCount++;
    for (Node* child : root->children) {
        printTree(child, nodeCount);
    }
}

int countNodes(Node* root) {
    if (!root) return 0;
    int count = 1;
    for (Node* child : root->children) {
        count += countNodes(child);
    }
    return count;
}

template <typename Func, typename... Args>
double measureTime(Func&& func, Args&&... args) {
    auto start = high_resolution_clock::now();
    func(std::forward<Args>(args)...);
    auto end = high_resolution_clock::now();
    duration<double> duration = end - start;
    return duration.count();
}

int main() {
    // Hardcoded inputs
    string bookName = "Data Structures and Algorithms";

    vector<string> chapters = {"Arrays", "Linked Lists", "Trees"};
    vector<vector<string>> sections = {
        {"Introduction to Arrays", "Operations on Arrays"},
        {"Introduction to Linked Lists", "Singly Linked List", "Doubly Linked List"},
        {"Binary Trees", "Binary Search Trees", "AVL Trees"}
    };

    // Print simulated user input
    cout << "Enter the name of the book: " << bookName << endl;
    Node* book = new Node("Book: " + bookName);

    int numChapters = chapters.size();
    cout << "Enter the number of chapters: " << numChapters << endl;

    for (int i = 0; i < numChapters; i++) {
        cout << "Enter the name of Chapter " << i + 1 << ": " << chapters[i] << endl;
        Node* chapter = new Node("Chapter: " + chapters[i]);
        book->children.push_back(chapter);

        int numSections = sections[i].size();
        cout << "Enter the number of sections in " << chapters[i] << ": " << numSections << endl;

        for (int j = 0; j < numSections; j++) {
            cout << "Enter the name of Section " << j + 1 << ": " << sections[i][j] << endl;
            Node* section = new Node("Section: " + sections[i][j]);
            chapter->children.push_back(section);
        }
    }

    int nodeCount = 0;
    double printTime = measureTime([&]() {
        cout << "\nBook: " << bookName << endl;
        cout << "Chapters:" << endl;
        for (int i = 0; i < book->children.size(); i++) {
            cout << i + 1 << ". " << book->children[i]->name.substr(9) << endl;
        }

        for (int i = 0; i < book->children.size(); i++) {
            cout << "\nChapter " << i + 1 << " - " << book->children[i]->name.substr(9)
                 << " has " << book->children[i]->children.size() << " sections:" << endl;
            for (int j = 0; j < book->children[i]->children.size(); j++) {
                cout << j + 1 << ". " << book->children[i]->children[j]->name.substr(9) << endl;
            }
        }

        printTree(book, nodeCount);
    });

    double countTime = measureTime([&]() {
        int totalNodes = countNodes(book);
        cout << "\nTotal number of nodes: " << totalNodes << endl;
    });

    cout << "\nTime taken to print the tree: " << printTime << " seconds" << endl;
    cout << "Time taken to count nodes: " << countTime << " seconds" << endl;
    cout << "\nTime Complexity: O(n), Space Complexity: O(n)" << endl;

    delete book;
    return 0;
}


PRACTICAL NO :- 04
Beginning with an empty binary search tree, Construct binary search tree by inserting the
values in the order given. After constructing a binary tree -
i. Insert new node
ii. Find number of nodes in longest path from root
iii. Minimum data value found in the tree
iv. Change a tree so that the roles of the left and right pointers are swapped at every node
v. Search a value

#PROGRAM
#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};

Node* insert(Node* root, int val) {
    if (!root) return new Node(val);
    if (val < root->data) root->left = insert(root->left, val);
    else root->right = insert(root->right, val);
    return root;
}

void preorder(Node* root) {
    if (root) {
        cout << root->data << " ";
        preorder(root->left);
        preorder(root->right);
    }
}

int height(Node* root) {
    return root ? 1 + max(height(root->left), height(root->right)) : -1;
}

int minimum(Node* root) {
    return root->left ? minimum(root->left) : root->data;
}

bool search(Node* root, int key) {
    if (!root) return false;
    if (root->data == key) return true;
    return key < root->data ? search(root->left, key) : search(root->right, key);
}

void mirror(Node* root) {
    if (root) {
        swap(root->left, root->right);
        mirror(root->left);
        mirror(root->right);
    }
}

int main() {
    Node* root = NULL;
    vector<int> nodes = {50, 30, 70, 20, 40, 60, 80}; // Predefined nodes
    int n = nodes.size();

    cout << "Enter number of nodes: " << n << endl;
    for (int i = 0; i < n; ++i) {
        cout << "Enter node " << i + 1 << ": " << nodes[i] << endl;
        root = insert(root, nodes[i]);
    }

    cout << "BST Preorder Traversal: ";
    preorder(root);
    cout << endl;

    cout << "Height (Longest Path): " << height(root) << endl;
    cout << "Minimum value: " << minimum(root) << endl;

    mirror(root);
    cout << "Mirrored BST Preorder Traversal: ";
    preorder(root);
    cout << endl;

    int key = 60; // Predefined key to search
    cout << "Enter key to search: " << key << endl;
    if (search(root, key))
        cout << "Key " << key << " is present in the BST!" << endl;
    else
        cout << "Key " << key << " is not present in the BST!" << endl;

    return 0;
}


PRACTICAL NO :- 05
Convert given binary tree into threaded binary tree. Analyze time and space complexity
of the algorithm. 

#PROGRAM
#include <iostream>
using namespace std;
class Node {
public:
    int data;
    Node *left, *right;
    bool rightThread;

    Node(int val) {
        data = val;
        left = right = nullptr;
        rightThread = false;
    }
};
class TBT {
    Node* prev = nullptr;

public:
    void createThreads(Node* root) {
        if (!root) return;
        createThreads(root->left);
        if (prev && !prev->right) {
            prev->right = root;
            prev->rightThread = true;
        }
        prev = root;
        createThreads(root->right);
    }

    void inorder(Node* root) {
        Node* curr = leftMost(root);
        while (curr) {
            cout << curr->data << " ";
            if (curr->rightThread)
                curr = curr->right;
            else
                curr = leftMost(curr->right);
        }
    }

private:
    Node* leftMost(Node* node) {
        while (node && node->left)
            node = node->left;
        return node;
    }
};

int main() {
    Node* root = new Node(20);
    root->left = new Node(10);
    root->right = new Node(30);
    root->left->left = new Node(5);
    root->left->right = new Node(15);

    TBT tree;
    tree.createThreads(root);

    cout << "Inorder Traversal (Threaded): ";
    tree.inorder(root);

    return 0;
}

PRACTICAL NO :- 06
There are flight paths between cities. If there is a flight between city A and city B then there is an edge between the cities.
The cost of the edge can be the time that flight take to reach city B from A, or the amount of fuel used for the journey. 
Represent this as a graph.The node can be represented by airport name or name of the city.
Use adjacency list representation of the graph or use adjacency matrix representation of the graph. 
Check whether the graph is connected or not. Justify the storage representation used.

#PROGRAM
#include <iostream>
#include <queue>
#include <cstring>  // for memset
using namespace std;

const int MAX = 50;
int adj_mat[MAX][MAX] = {0};  // Adjacency matrix
int visited[MAX] = {0};       // Visited array

// DFS Function
void dfs(int s, int n, string arr[]) {
    visited[s] = 1;
    cout << arr[s] << " ";
    for (int i = 0; i < n; i++) {
        if (adj_mat[s][i] && !visited[i]) {
            dfs(i, n, arr);
        }
    }
}

// BFS Function
void bfs(int s, int n, string arr[]) {
    int bfs_visited[MAX] = {0};  // Corrected
    queue<int> q;
    bfs_visited[s] = 1;
    q.push(s);
    cout << arr[s] << " ";
    while (!q.empty()) {
        int v = q.front(); q.pop();
        for (int i = 0; i < n; i++) {
            if (adj_mat[v][i] && !bfs_visited[i]) {
                cout << arr[i] << " ";
                bfs_visited[i] = 1;
                q.push(i);
            }
        }
    }
}

int main() {
    int n = 4;  // Number of cities
    cout << "Enter number of cities: " << n << endl;

    string cities[] = {"DEL", "MUM", "BLR", "HYD"};
    for (int i = 0; i < n; i++) {
        cout << "Enter city #" << i + 1 << " (Airport Code): " << cities[i] << endl;
    }

    // Hardcoded distances between cities
    int distances[4][4] = {
        {0, 2, 5, 0},
        {2, 0, 4, 7},
        {5, 4, 0, 3},
        {0, 7, 3, 0}
    };

    // Fill adjacency matrix
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            cout << "Enter distance (time/fuel) between " << cities[i] << " and " << cities[j] << ": " << distances[i][j] << endl;
            adj_mat[i][j] = adj_mat[j][i] = distances[i][j];
        }
    }

    // Display adjacency matrix
    cout << "\n\t";
    for (int i = 0; i < n; i++) cout << cities[i] << "\t";
    cout << "\n";
    for (int i = 0; i < n; i++) {
        cout << cities[i];
        for (int j = 0; j < n; j++) cout << "\t" << adj_mat[i][j] << "\t";
        cout << endl;
    }

    int u = 0;  // Starting city index
    cout << "Enter starting city (index 0 to " << n - 1 << "): " << u << endl;

    cout << "DFS: ";
    memset(visited, 0, sizeof(visited));  // Reset visited
    dfs(u, n, cities);

    cout << "\nBFS: ";
    bfs(u, n, cities);
    cout << endl;

    return 0;
}

PRACTICAL NO :- 07
You have a business with several offices; you want to lease phone lines to connect them
up with each other; and the phone company charges different amounts of money to
connect different pairs of cities. You want a set of lines that connects all your offices with
a minimum total cost.

#PROGRAM
#include <iostream>
#include <climits>
using namespace std;

#define INF 999

class PrimMST {
    int graph[5][5] = {
        {INF, 2, 3, INF, INF},
        {2, INF, INF, 4, INF},
        {3, INF, INF, 1, 5},
        {INF, 4, 1, INF, 6},
        {INF, INF, 5, 6, INF}
    };
    int V = 5;

public:
    void display();
    void findMST();
};

void PrimMST::display() {
    cout << "\nAdjacency Matrix:\n   ";
    for (int i = 0; i < V; i++) cout << i + 1 << "   ";
    cout << endl;

    for (int i = 0; i < V; i++) {
        cout << i + 1 << " ";
        for (int j = 0; j < V; j++)
            cout << (graph[i][j] == INF ? "INF" : to_string(graph[i][j])) << " ";
        cout << endl;
    }
}

void PrimMST::findMST() {
    int parent[V], key[V];
    bool visited[V] = {false};

    for (int i = 0; i < V; i++) key[i] = INF;
    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int minKey = INF, u;

        for (int i = 0; i < V; i++)
            if (!visited[i] && key[i] < minKey)
                minKey = key[i], u = i;

        visited[u] = true;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] != INF && !visited[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    cout << "\nMinimum Spanning Tree (MST) connections:\n";
    int totalCost = 0;
    for (int i = 1; i < V; i++) {
        cout << "Office " << parent[i] + 1 << " -> Office " << i + 1
             << " with cost: " << graph[i][parent[i]] << endl;
        totalCost += graph[i][parent[i]];
    }
    cout << "Total minimum cost to connect all offices: " << totalCost << endl;
}

int main() {
    PrimMST p;
    p.display();
    p.findMST();
    return 0;
}

PRACTICAL NO :08
Given sequence k = k1 <k2 < â€¦ <kn of n sorted keys, with a search probability pi for each
key ki . Build the Binary search tree that has the least search cost given the access
probability for each key? 

#PROGRAM
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

class OBST {
    vector<int> keys, freq;
    vector<vector<int>> cost, root;
    int n;

public:
    void getInput();
    void buildOBST();
    void printPreorder(int, int);
};

void OBST::getInput() {
    cout << "\nEnter number of keys: ";
    cin >> n;

    keys.resize(n);
    freq.resize(n);
    cost.assign(n, vector<int>(n));
    root.assign(n, vector<int>(n));

    cout << "\nEnter keys: ";
    for (auto &k : keys) cin >> k;
    cout << "\nEnter corresponding frequencies: ";
    for (auto &f : freq) cin >> f;
}

void OBST::buildOBST() {
    vector<vector<int>> sum(n, vector<int>(n));

    for (int i = 0; i < n; i++) {
        cost[i][i] = freq[i];
        root[i][i] = i;
        sum[i][i] = freq[i];
    }

    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            sum[i][j] = sum[i][j-1] + freq[j];
            cost[i][j] = INT_MAX;

            for (int r = i; r <= j; r++) {
                int total = (r > i ? cost[i][r-1] : 0) + (r < j ? cost[r+1][j] : 0) + sum[i][j];
                if (total < cost[i][j]) {
                    cost[i][j] = total;
                    root[i][j] = r;
                }
            }
        }
    }

    cout << "\nOptimal BST Cost: " << cost[0][n-1] << endl;
    cout << "\nPreorder Traversal of OBST: ";
    printPreorder(0, n-1);
    cout << endl;
}

void OBST::printPreorder(int i, int j) {
    if (i > j) return;
    int r = root[i][j];
    cout << keys[r] << " ";
    printPreorder(i, r-1);
    printPreorder(r+1, j);
}

int main() {
    OBST tree;
    cout << "\n-----*** Optimal BST Construction ***-----";
    tree.getInput();
    tree.buildOBST();
    return 0;
}

PRACTICAL NO :- 09
A Dictionary stores keywords & its meanings. Provide facility for adding new keywords,
deleting keywords, updating values of any entry. Provide facility to display whole data
sorted in ascending/ Descending order. Also find how many maximum comparisons may
require for finding any keyword. Use Height balance tree and find the complexity for
finding a keyword 

#PROGRAM
#include <iostream>
#include <map>
#include <string>
using namespace std;

class Dictionary {
    map<string, string> dict;

public:
    void insert(const string &key, const string &meaning) {
        dict[key] = meaning;
        cout << "Keyword '" << key << "' added successfully.\n";
    }

    void remove(const string &key) {
        cout << (dict.erase(key) ? "Keyword '" + key + "' deleted successfully.\n"
                                 : "Keyword '" + key + "' not found.\n");
    }

    void display(bool ascending = true) {
        if (dict.empty()) {
            cout << "Dictionary is empty.\n";
            return;
        }
        cout << "\nDictionary (" << (ascending ? "Ascending" : "Descending") << " Order):\n";
        if (ascending)
            for (const auto &entry : dict)
                cout << entry.first << " : " << entry.second << endl;
        else
            for (auto it = dict.rbegin(); it != dict.rend(); ++it)
                cout << it->first << " : " << it->second << endl;
    }

    void search(const string &key) {
        auto it = dict.find(key);
        cout << (it != dict.end() ? "Keyword found: " + it->first + " -> " + it->second + "\n"
                                  : "Keyword '" + key + "' not found.\n");
    }
};

int main() {
    Dictionary d;

    // Hardcoded dictionary entries
    d.insert("apple", "A fruit that grows on an apple tree.");
    d.insert("banana", "A yellow fruit that is long and curved.");
    d.insert("computer", "An electronic device for storing and processing data.");
    d.insert("dictionary", "A reference book containing an alphabetical list of words.");
    d.insert("algorithm", "A step-by-step procedure for solving a problem or completing a task.");

    int choice;
    const string menu[] = {
        "1. Insert Keyword", "2. Delete Keyword",
        "3. Display Dictionary (Ascending)", "4. Display Dictionary (Descending)",
        "5. Search Keyword", "6. Exit"
    };

    do {
        cout << "\n===== DICTIONARY MENU =====\n";
        for (const auto &item : menu)
            cout << item << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                // For case 1, it's redundant because all keywords are inserted already
                cout << "Keywords already inserted in the dictionary.\n";
                break;
            case 2:
                d.remove("computer");  // Hardcoded to delete "computer"
                break;
            case 3:
                d.display(true);  // Display in ascending order
                break;
            case 4:
                d.display(false);  // Display in descending order
                break;
            case 5:
                d.search("banana");  // Hardcoded to search for "banana"
                break;
            case 6:
                cout << "Exiting program...\n";
                break;
            default:
                cout << "Invalid choice! Please enter a valid option.\n";
        }
    } while (choice != 6);

    return 0;
}


PRACTICAL NO :- 10
Read the marks obtained by students of second year in an online examination of
particular subject. Find out maximum and minimum marks obtained in that subject. Use
heap data structure. Analyze the algorithm.

#PROGRAM
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
    int n;
    cout << "Enter the number of students: ";
    cin >> n;

    if (n <= 0) {
        cout << "Invalid number of students!" << endl;
        return 1;
    }

    vector<int> marks(n);
    cout << "Enter the marks of students: ";
    for (int &mark : marks) cin >> mark;

    priority_queue<int> maxHeap(marks.begin(), marks.end());
    priority_queue<int, vector<int>, greater<int>> minHeap(marks.begin(), marks.end());

    cout << "\n===== Results =====\n";
    cout << "Maximum marks obtained: " << maxHeap.top() << endl;
    cout << "Minimum marks obtained: " << minHeap.top() << endl;

    return 0;
}

PRACTICAL NO :- 11
Department maintains a student information. The file contains roll number, name,
division and address. Allow user to add, delete information of student. Display
information of particular employee. If record of student does not exist an appropriate
message is displayed. If it is, then the system displays the student details. Use sequential
file to main the data

#PROGRAM
#include <iostream>
#include <fstream>
using namespace std;

struct Student {
    int roll;
    char name[20];
    float marks;
};

int main() {
    fstream file;
    Student s;
    int choice;

    do {
        cout << "\n1.Add  2.Display  3.Exit\nChoice: ";
        cin >> choice;

        if (choice == 1) {
            // Taking input for a new student
            cout << "Enter Roll, Name, Marks: ";
            cin >> s.roll >> s.name >> s.marks;

            // Open file in append mode to add student data
            file.open("students.dat", ios::app | ios::binary);
            if (file.is_open()) {
                file.write((char*)&s, sizeof(s));
                cout << "Student added successfully.\n";
                file.close();
            } else {
                cout << "Unable to open file for writing.\n";
            }
        }
        else if (choice == 2) {
            // Displaying student data
            file.open("students.dat", ios::in | ios::binary);
            if (file.is_open()) {
                cout << "\nStudent Records:\n";
                while (file.read((char*)&s, sizeof(s))) {
                    cout << "Roll: " << s.roll << ", Name: " << s.name << ", Marks: " << s.marks << endl;
                }
                file.close();
            } else {
                cout << "Unable to open file for reading.\n";
            }
        }
    } while (choice != 3);

    return 0;
}

PRACTICAL NO :- 12
Company maintains employee information as employee ID, name, designation and salary.
Allow user to add, delete information of employee. Display information of particular
employee. If employee does not exist an appropriate message is displayed. If it is, then
the system displays the employee details. Use index sequential file to maintain the data. 

#PROGRAM
#include <iostream>
#include <fstream>
using namespace std;

struct Employee {
    int id;
    char name[20];
    float salary;
};

int main() {
    fstream file;
    Employee e;
    int choice, searchId;
    
    do {
        cout << "\n1.Add 2.Search 3.Display 4.Exit\nChoice: ";
        cin >> choice;
        
        if (choice == 1) {
            // Add new employee
            cout << "Enter ID, Name, Salary: ";
            cin >> e.id >> e.name >> e.salary;
            file.open("emp.dat", ios::app | ios::binary);
            if (file.is_open()) {
                file.write((char*)&e, sizeof(e));
                file.close();
                cout << "Employee added successfully.\n";
            } else {
                cout << "Error opening file.\n";
            }
        }
        else if (choice == 2) {
            // Search for an employee by ID
            cout << "Enter ID to search: ";
            cin >> searchId;
            file.open("emp.dat", ios::in | ios::binary);
            bool found = false;
            if (file.is_open()) {
                while (file.read((char*)&e, sizeof(e))) {
                    if (e.id == searchId) {
                        cout << "Employee found: " << e.id << " " << e.name << " " << e.salary << endl;
                        found = true;
                        break;
                    }
                }
                if (!found) cout << "Record not found\n";
                file.close();
            } else {
                cout << "Error opening file.\n";
            }
        }
        else if (choice == 3) {
            // Display all employees
            file.open("emp.dat", ios::in | ios::binary);
            if (file.is_open()) {
                cout << "\nEmployee Records:\n";
                while (file.read((char*)&e, sizeof(e))) {
                    cout << e.id << " " << e.name << " " << e.salary << endl;
                }
                file.close();
            } else {
                cout << "Error opening file.\n";
            }
        }
    } while (choice != 4);
    
    return 0;
}
